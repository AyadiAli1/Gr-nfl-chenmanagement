<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1112736_gr_nfl_c_veranstaltung</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>verify_veranstaltung</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	// Add your code here
	var veranstaltung = new GlideRecord('x_1112736_gr_nfl_c_veranstaltung');
	
	var kollidiert_mit_arbeit = false; // -> für Email später
	var kollidiert_mit_veranst = false; // -> für Email später
	
	// In Tabelle GF-Arbeiten nach Records suchen mit derselben GF und überschneidendem Datum
	veranstaltung.addQuery('gebaeude', current.gebaeude);
	veranstaltung.addQuery('raum', current.raum);
	veranstaltung.addQuery('start', '<=', current.ende);
	veranstaltung.addQuery('ende', '>=', current.start);
	veranstaltung.query();
	
	
	if (veranstaltung.hasNext()) {
        gs.addErrorMessage('Es gibt bereits eine Veranstaltung, die mit diesem Zeitraum kollidiert.');
        current.setAbortAction(true); // Verhindern Sie die Speicherung des neuen Datensatzes
    }
	
	
	var gr = new GlideRecord('x_1112736_gr_nfl_c_m2m_x_1112736_g_x_1112736_g');
	gr.addQuery('x_1112736_gr_nfl_c_gebaeude', current.gebaeude);
	gr.addJoinQuery('x_1112736_gr_nfl_c_gruenflaechenarbeiten', 'x_1112736_gr_nfl_c_gruenflaechen', 'ort');
	gr.query();
	
	//var i=0;
	//while(gr.next()) {
	//	i++;
	//}
	//if(current.prio == 2 && i>0){ // if the prio is 1 that means it cannot be delayed
	//current.setAbortAction(true);
	//gs.addInfoMessage('Es gibt '+i+' GF-Arbeiten, die nebenan stattfinden. Sie müssen einen anderen Termin auswählen');	
	//}
	
	//if(gr.hasNext() && current.prio == 2){
	//	current.setAbortAction(true);
	//gs.addInfoMessage('Es gibt eine GF-Arbeit, die nebenan stattfindet. Sie müssen einen anderen Termin auswählen');
	//}
	
	// nächste Schritte = 
	// - eine spalte , die heißt kollidiert mit
	// da wird der name der kollidierende GF-Arbeit gespeichert 
	

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-09-10 09:30:05</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2843dffb474171107ec50d45d36d43d5</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>verify_veranstaltung</sys_name>
        <sys_overrides/>
        <sys_package display_value="Grünflächenmanagement" source="x_1112736_gr_nfl_c">25c281b8470531107ec50d45d36d43d5</sys_package>
        <sys_policy/>
        <sys_scope display_value="Grünflächenmanagement">25c281b8470531107ec50d45d36d43d5</sys_scope>
        <sys_update_name>sys_script_2843dffb474171107ec50d45d36d43d5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-12 14:44:07</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2843dffb474171107ec50d45d36d43d5"/>
</record_update>
