<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1112736_gr_nfl_c_gruenflaechenarbeiten</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>test</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var link = '<a href="https://dev120546.service-now.com/nav_to.do?uri=sys_db_object.do?sys_id=f4d3194e47cd35107ec50d45d36d43bd">Koordinationstabelle</a>';

    // beim Updaten
    if (current.kollision == 3 || current.kollision == 4) {

        current.kollision.setValue(1);
    }
    // Add your code here
    var arbeiten = new GlideRecord('x_1112736_gr_nfl_c_gruenflaechenarbeiten');
    arbeiten.addQuery('ort', current.ort);
    arbeiten.addQuery('sys_id', '!=', current.sys_id);
    arbeiten.query();

    var arr_gf = [];
    var current_start = new GlideDateTime(current.start);
    var current_ende = new GlideDateTime(current.ende);

    while (arbeiten.next()) {
        var arb_start = new GlideDateTime(arbeiten.getValue('start'));
        var arb_ende = new GlideDateTime(arbeiten.getValue('ende'));
        if (arb_start <= current_ende && arb_ende >= current_start) {
            arr_gf.push(arbeiten.getValue('sys_id'));
        }
    }

    arbeiten.addQuery('sys_id', 'IN', arr_gf);
    arbeiten.query();

    if (arbeiten.hasNext()) {
        gs.addInfoMessage('Überschneidung mit einer Grünflächen-Arbeit. Siehe ' + link + arbeiten.getRowCount());

        while (arbeiten.next()) {
            var arbeiten_typ = arbeiten.typ;
            var current_typ = current.typ;

            if (current_typ.name == 'Bau' || current_typ.name == 'Unkrautbekämpfung' && arbeiten_typ.name == 'Mähen' || current_typ.name == 'Unkrautbekämpfung' && arbeiten_typ.name == 'Einpflanzen' || current_typ.name == 'Unkrautbekämpfung' && arbeiten_typ.name == 'Wässern' || current_typ.name == 'Düngen' && arbeiten_typ.name == 'Mähen' || current_typ.name == 'Düngen' && arbeiten_typ.name == 'Einpflanzen' || current_typ.name == 'Düngen' && arbeiten_typ.name == 'Wässern' || current_typ.name == 'Düngen' && arbeiten_typ.name == 'Beschneiden' || current_typ.name == 'Beschneiden' && arbeiten_typ.name == 'Mähen' || current_typ.name == 'Beschneiden' && arbeiten_typ.name == 'Wässern' || current_typ.name == 'Beschneiden' && arbeiten_typ.name == 'Düngen' || current_typ.name == 'Wässern' && arbeiten_typ.name == 'Mähen' || current_typ.name == 'Wässern' && arbeiten_typ.name == 'Beschneiden' || current_typ.name == 'Wässern' && arbeiten_typ.name == 'Düngen' || current_typ.name == 'Wässern' && arbeiten_typ.name == 'Unkrautbekämpfung' || current_typ.name == 'Einpflanzen' && arbeiten_typ.name == 'Unkrautbekämpfung' || current_typ.name == 'Einpflanzen' && arbeiten_typ.name == 'Mähen' || current_typ.name == 'Einpflanzen' && arbeiten_typ.name == 'Wässern' || current_typ.name == 'Einpflanzen' && arbeiten_typ.name == 'Beschneiden' || current_typ.name == 'Einpflanzen' && arbeiten_typ.name == 'Düngen' || current_typ.name == 'Mähen' && arbeiten_typ.name == 'Beschneiden' || current_typ.name == 'Mähen' && arbeiten_typ.name == 'Wässern' || current_typ.name == 'Mähen' && arbeiten_typ.name == 'Einpflanzen' || current_typ.name == 'Mähen' && arbeiten_typ.name == 'Düngen' || current_typ.name == 'Mähen' && arbeiten_typ.name == 'Unkrautbekämpfung') {
                gs.addInfoMessage('Wählen Sie bitte ein anderes Datum, da die Arbeitstypen kollidieren');
                current.setAbortAction(true);
            }

            var kollidiert_mit_arbeit = new GlideRecord('x_1112736_gr_nfl_c_kollidiert_mit_arbeit');

            kollidiert_mit_arbeit.initialize();
            kollidiert_mit_arbeit.gfa_id_1 = current.sys_id;
            kollidiert_mit_arbeit.gfa_id_2 = arbeiten.getValue('sys_id');
            kollidiert_mit_arbeit.insert();
        }
    }


    // Vergleich mit bestehenden GF-Arbeiten -> funktioniert

    /*
    arbeiten.addQuery('ort', current.ort);
    arbeiten.addQuery('anfangsdatum', '<=', current.enddatum);
    arbeiten.addQuery('enddatum', '>=', current.anfangsdatum);
    arbeiten.query();*/






    /*
    var gr = new GlideRecord('x_1112736_gr_nfl_c_m2m_x_1112736_g_x_1112736_g'); // Tabelle anliegend(GF,Gebäude)
    // gr.addJoinQuery('x_1112736_gr_nfl_c_veranstaltung', 'x_1112736_gr_nfl_c_gebaeude', 'gebaeude'); // Inner Join mit Tabelle Veranstaltung mit
    gr.addJoinQuery('x_1112736_gr_nfl_c_veranstaltung');
    gr.addQuery('x_1112736_gr_nfl_c_gruenflaechen', current.ort);
    gr.query();*/

    // Welche Gebäude schließen an die GF an?
    /*
    var anliegend = new GlideRecord('x_1112736_gr_nfl_c_m2m_x_1112736_g_x_1112736_g');
    anliegend.addQuery('x_1112736_gr_nfl_c_gruenflaechen', current.ort);
    anliegend.query();
    
    if(anliegend.next()){
    	gs.addInfoMessage(current.ort.getDisplayValue()+' liegt an '+anliegend.getRowCount()+' Gebäuden an.');
    }
    else{
    	gs.addErrorMessage('Keine Datensätze vorhanden. (Gebäude finden)');
    }*/



    // Grünflächen und Gebäude prüfen

    var arr = []; // betroffene Veranstaltungen
    var anliegend = new GlideRecord('x_1112736_gr_nfl_c_m2m_x_1112736_g_x_1112736_g');
    anliegend.addQuery('x_1112736_gr_nfl_c_gruenflaechen', current.ort);
    anliegend.query();

    while (anliegend.next()) {
        arr.push(anliegend.getValue('x_1112736_gr_nfl_c_gebaeude'));
    }

    var veran = new GlideRecord('x_1112736_gr_nfl_c_veranstaltung');
    veran.addQuery('gebaeude', 'IN', arr.join(','));
    veran.query();



    // Daten überprüfen

    var arr2 = [];
    var current_datetime_start = new GlideDateTime(current.start);
    var current_datetime_ende = new GlideDateTime(current.ende);

    while (veran.next()) {
        //var prio = veran.getValue('prio');
        var veran_datetime_start = new GlideDateTime(veran.getValue('start'));
        var veran_datetime_ende = new GlideDateTime(veran.getValue('ende'));
        if (veran_datetime_start <= current_datetime_ende && veran_datetime_ende >= current_datetime_start) {
            arr2.push(veran.getValue('sys_id'));
        }
    }

    veran.addQuery('sys_id', 'IN', arr2); // Veranstaltungen, die mit GF-Arbeit kollidieren (ohne Prio)
    veran.query();

    // Prios prüfen

    // Tabelle mit Prio1 
    var veran_prio1 = new GlideRecord('x_1112736_gr_nfl_c_veranstaltung');
    veran_prio1.addQuery('sys_id', 'IN', arr2);
    veran_prio1.addQuery('prio', '1');
    veran_prio1.query();

    // Tabelle mit Prio2
    var veran_prio2 = new GlideRecord('x_1112736_gr_nfl_c_veranstaltung');
    veran_prio2.addQuery('sys_id', 'IN', arr2);
    veran_prio2.addQuery('prio', '2');
    veran_prio2.query();

    // kollidiert mit Prio1?
    if (veran_prio1.hasNext()) {

        while (veran_prio1.next()) {
            var check = current.typ;
            if (check.belaestigungstyp == 'sperrung') {
                current.setValue('kollision', 3);
                current.setValue('kollision_mit_vl', veran_prio1.getUniqueValue());
            } else {
                gs.addErrorMessage('Überschneidung mit einer Veranstaltung der Priorität 1. Ändere das Datum!');
                current.setAbortAction(true);
            }
        }
    } else if (veran_prio2.hasNext()) {
        gs.addInfoMessage('Überschneidung mit einer Veranstaltung der Priorität 2. Siehe ' + link);
        while (veran_prio2.next()) {
            current.setValue('kollision', 4);
            gs.addInfoMessage(veran_prio2.getUniqueValue());
            current.setValue('kollision_mit_vl', veran_prio2.getUniqueValue());
            var kolli_tab = new GlideRecord('x_1112736_gr_nfl_c_m2m_gf_arbeit_to_veranstaltung');
            kolli_tab.initialize();
            kolli_tab.x_1112736_gr_nfl_c_gruenflaechenarbeiten = current.sys_id;
            kolli_tab.x_1112736_gr_nfl_c_veranstaltung = veran_prio2.getValue('sys_id');
            kolli_tab.insert();
        }
    } else {
        //gs.addInfoMessage('Erfolgreich gespeichert.');
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>claudia</sys_created_by>
        <sys_created_on>2023-09-07 22:02:28</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f3507603470d71107ec50d45d36d439b</sys_id>
        <sys_mod_count>119</sys_mod_count>
        <sys_name>test</sys_name>
        <sys_overrides/>
        <sys_package display_value="Grünflächenmanagement" source="x_1112736_gr_nfl_c">25c281b8470531107ec50d45d36d43d5</sys_package>
        <sys_policy/>
        <sys_scope display_value="Grünflächenmanagement">25c281b8470531107ec50d45d36d43d5</sys_scope>
        <sys_update_name>sys_script_f3507603470d71107ec50d45d36d439b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-17 11:42:06</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f3507603470d71107ec50d45d36d439b"/>
</record_update>
